Spring framework: 
Spring Boot is an open-source tool that makes developing web applications and microservices with Spring Framework faster and easier. 
It is one of the most popular frameworks within the Java ecosystem for web application development. 
A majority of Java development roles will use Spring Boot and other Spring-based applications.
Runs on the JVM

We use spring boot to make MVC structured API

Benefits:
  Make web development fast with auto configuration -> when we build our app, it automatically gets dependencies according to configuration and avoids human error
  An opinionated appraoch to configuration-> choosing dependencies from list that is already configured
  Create standalone applications ->doesnt rely on external dependency

  spring web -> creates RESTFUL api

What problem does it solve?
Dependency injection  feature, allows defining dependencies
Annotations: Spring Boot, and moreover the entire Spring ecosystem, relies on annotations to provide a wide range of functionalities for configuration, component scanning, dependency injection, etc.
Allows app to be more modular
Inversion of control ->handing over control of instantiating classes to spring framework/container->creating bean i.e. instantiated object
  @Component
  @Service
  @Controller
Annotation lets the container know what they are. i.e. @restController, @requestMapping ->route @GetMapping ->endPoint
  Has a container which stores this objects
 
Pros: Cleaner code, 
    Better decoupling of our dependencies (change in one code leads to change in another if they are tighly coupled | each method has single responsibility), testing is easier because of it

Data binding operation will be needed to consume public api
spring serialize to json, to any response from get request
in controller, sending json obj from FE to backend. deserialize to java object

FOLDER
App properties file is where you will put sensitive information

Then at the bottom we have the build plugin spring-boot-maven-plugin. This provides Spring Boot support in Apache Maven. 
It allows you to package executable Jar (Java ARchive) or War (Web ARchive) archives, run Spring Boot applications, generate build information and 
start your Spring Boot application prior to running integration tests.

Running the Spring Boot application creates the 'Web Application Context', which is the 'Inversion of Control' container, that manages the creation, injection and lifecycle of the objects within the application. 
It will also start the Apache TomCat webserver, which will start listening for HTTP requests.
